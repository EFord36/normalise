# -*- coding: utf-8 -*-
"""
Created on Mon Jul 18 09:44:25 2016

@author: emmaflint
"""
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import (accuracy_score, confusion_matrix, precision_score,
recall_score)

from class_NUMB import *
from gold_standard_numbs import gs_numb_dict, gs_numb_tagged
from gold_standard_full import gold_standard

text = gold_standard


def create_NUMB_ex():
    """ Create a text file ('gs_numbs') of tuples generated by gen_frame,
    shows the context for each NUMB NSW.
    """
    NUMB_ex = []
    for ind, (word, tag) in gs_numb_dict.items():
        NUMB_ex.append(gen_frame((ind, (word, tag)), text))
    with open('gs_numbs', mode='w', encoding='utf-8') as file:
        file.write(str(NUMB_ex))

gold_standard_predicted = run_clfNUM(gs_numb_dict, text)


def gold_vs_pred_tuple():
    """ Return list of predicted tags and list of gold standard tags"""
    predicted = []
    gold = []
    for ind, (value1, value2, value3) in gold_standard_predicted.items():
        predicted.append(value3)
        gold.append(gs_numb_tagged[ind][2])
    return predicted, gold

# Compute % accuracy by comparing gold standard tags to predicted tags.
accuracy = accuracy_score(gold_vs_pred_tuple()[0], gold_vs_pred_tuple()[1])

labels = ['PRCT', 'MONEY', 'NTIME', 'NYER', 'NDIG', 'NORD', 'NUM', 'NRANGE']

# Return a confusion matrix.
confusion = confusion_matrix(gold_vs_pred_tuple()[0], gold_vs_pred_tuple()[1],
                             labels)

# Return a normalised confusion matrix.
confusion_normalised = (confusion.astype('float') / confusion.sum(axis=1)
                        [:, np.newaxis])


def plot_confusion_matrix(r):
    """ Plot a graphical confusion matrix with predicted tags on the x axis
    and correct tags on the y axis. Allows us to see which pairs of tags are
    confused most frequently.
    """
    fig = plt.figure()
    ax = fig.add_subplot(111)
    cax = ax.matshow(r)
    plt.title('Confusion Matrix')
    fig.colorbar(cax)
    ax.set_xticklabels([''] + labels)
    ax.set_yticklabels([''] + labels)
    plt.xlabel('Predicted')
    plt.ylabel('True')
    plt.show()


def list_errors():
    for ind, (txt, tag, ntag) in gold_standard_predicted.items():
        if ntag != gs_numb_tagged[ind][2]:
            print("Ind: {0}, Item: {1}, Predicted Tag: {2}, True Tag: {3}, /n, {4}"
            .format(ind, txt, ntag, gs_numb_tagged[ind][2], gen_frame((ind, (txt, tag)), text)))
